apiVersion: apps/v1
kind: Deployment
metadata:
  name: bci-gpt-api
  namespace: bci-gpt
  labels:
    app: bci-gpt
    component: api
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: bci-gpt
      component: api
  template:
    metadata:
      labels:
        app: bci-gpt
        component: api
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: bci-gpt
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: bci-gpt-api
        image: bci-gpt:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 8001
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: SERVICE_TYPE
          value: "api"
        - name: LOG_LEVEL
          value: "info"
        - name: WORKERS
          value: "4"
        - name: ENABLE_METRICS
          value: "true"
        - name: ENABLE_SECURITY
          value: "true"
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: bci-gpt-secrets
              key: postgres-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: bci-gpt-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: bci-gpt-secrets
              key: secret-key
        - name: OPENTELEMETRY_EXPORTER_OTLP_ENDPOINT
          value: "http://jaeger-collector:14268/api/traces"
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
            nvidia.com/gpu: "0"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: "1"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: models
          mountPath: /app/models
          readOnly: true
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: models
        persistentVolumeClaim:
          claimName: bci-gpt-models-pvc
      - name: data
        persistentVolumeClaim:
          claimName: bci-gpt-data-pvc
      - name: logs
        emptyDir: {}
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      - name: config
        configMap:
          name: bci-gpt-config
      nodeSelector:
        node-type: gpu
      tolerations:
      - key: nvidia.com/gpu
        operator: Equal
        value: "true"
        effect: NoSchedule
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - bci-gpt
                - key: component
                  operator: In
                  values:
                  - api
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bci-gpt-worker
  namespace: bci-gpt
  labels:
    app: bci-gpt
    component: worker
    version: v1.0.0
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: bci-gpt
      component: worker
  template:
    metadata:
      labels:
        app: bci-gpt
        component: worker
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: bci-gpt
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: bci-gpt-worker
        image: bci-gpt:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8001
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: SERVICE_TYPE
          value: "worker"
        - name: LOG_LEVEL
          value: "info"
        - name: CELERY_CONCURRENCY
          value: "2"
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: bci-gpt-secrets
              key: postgres-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: bci-gpt-secrets
              key: redis-url
        resources:
          requests:
            memory: "1.5Gi"
            cpu: "200m"
            nvidia.com/gpu: "0"
          limits:
            memory: "3Gi"
            cpu: "1000m"
            nvidia.com/gpu: "1"
        livenessProbe:
          exec:
            command:
            - celery
            - -A
            - bci_gpt.workers.celery_app
            - inspect
            - ping
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        volumeMounts:
        - name: models
          mountPath: /app/models
          readOnly: true
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: models
        persistentVolumeClaim:
          claimName: bci-gpt-models-pvc
      - name: data
        persistentVolumeClaim:
          claimName: bci-gpt-data-pvc
      - name: logs
        emptyDir: {}
      - name: cache
        emptyDir:
          sizeLimit: 500Mi
      nodeSelector:
        node-type: gpu
      tolerations:
      - key: nvidia.com/gpu
        operator: Equal
        value: "true"
        effect: NoSchedule

---
apiVersion: v1
kind: Service
metadata:
  name: bci-gpt-api
  namespace: bci-gpt
  labels:
    app: bci-gpt
    component: api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  - port: 8001
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: bci-gpt
    component: api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bci-gpt-ingress
  namespace: bci-gpt
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
spec:
  tls:
  - hosts:
    - bci-gpt.terragonlabs.com
    - api.bci-gpt.terragonlabs.com
    secretName: bci-gpt-tls
  rules:
  - host: bci-gpt.terragonlabs.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bci-gpt-api
            port:
              number: 80
  - host: api.bci-gpt.terragonlabs.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bci-gpt-api
            port:
              number: 80