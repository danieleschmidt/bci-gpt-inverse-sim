version: '3.8'

services:
  # BCI-GPT main application
  bci-gpt:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: bci-gpt-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - BCI_GPT_ENV=production
      - BCI_GPT_LOG_LEVEL=INFO
      - BCI_GPT_DATA_DIR=/app/data
      - BCI_GPT_MODEL_DIR=/app/models
      - BCI_GPT_CACHE_DIR=/app/cache
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://bci:password@postgres:5432/bcigpt
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - redis
      - postgres
    networks:
      - bci-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: bci-gpt-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis_data:/data
    networks:
      - bci-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL for metadata and user management
  postgres:
    image: postgres:15-alpine
    container_name: bci-gpt-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=bcigpt
      - POSTGRES_USER=bci
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - bci-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: bci-gpt-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - bci-gpt
    networks:
      - bci-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: bci-gpt-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - bci-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: bci-gpt-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - bci-network

  # ELK Stack for centralized logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: bci-gpt-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - bci-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: bci-gpt-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - bci-network

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: bci-gpt-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - bci-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  bci-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16