{
  "app": {
    "name": "BCI-GPT",
    "description": "Brain-Computer Interface GPT Inverse Simulator",
    "version": "v1.0.0"
  },
  "common": {
    "yes": "Yes",
    "no": "No",
    "ok": "OK",
    "cancel": "Cancel",
    "save": "Save",
    "load": "Load",
    "delete": "Delete",
    "edit": "Edit",
    "create": "Create",
    "update": "Update",
    "refresh": "Refresh",
    "search": "Search",
    "clear": "Clear",
    "help": "Help",
    "about": "About",
    "settings": "Settings",
    "exit": "Exit",
    "error": "Error",
    "warning": "Warning",
    "info": "Information",
    "success": "Success",
    "loading": "Loading...",
    "processing": "Processing...",
    "complete": "Complete",
    "failed": "Failed"
  },
  "cli": {
    "train": {
      "title": "Training BCI-GPT Model",
      "starting": "Starting model training...",
      "completed": "Training completed successfully!",
      "failed": "Training failed: {error}",
      "progress": "Epoch {epoch}/{total_epochs} - Loss: {loss:.4f}",
      "validation": "Validation - Accuracy: {accuracy:.2%}, WER: {wer:.2%}",
      "saving": "Saving model to {path}...",
      "config_loaded": "Loaded configuration from {path}",
      "resume_from": "Resuming training from checkpoint: {checkpoint}"
    },
    "decode": {
      "title": "BCI-GPT Decoding",
      "realtime": "Real-time EEG Decoding",
      "file": "File-based EEG Decoding", 
      "starting": "Starting decoding...",
      "completed": "Decoding completed successfully!",
      "failed": "Decoding failed: {error}",
      "model_loaded": "Model loaded successfully",
      "model_failed": "Could not load model: {error}. Using demo mode.",
      "stream_started": "Stream started successfully",
      "stream_failed": "Stream connection failed: {error}",
      "decoded_text": "Decoded: '{text}' (confidence: {confidence:.2f})",
      "low_confidence": "Low confidence: {confidence:.2f} < {threshold:.2f}",
      "no_data": "No data received from stream",
      "stopping": "Stopping real-time decoding...",
      "benchmark": "Benchmarking model performance...",
      "demo": "Running BCI-GPT decoding demo"
    },
    "generate": {
      "title": "Synthetic EEG Generation",
      "starting": "Generating EEG for: '{text}'",
      "completed": "EEG generation completed!",
      "failed": "Generation failed: {error}",
      "model_loaded": "Inverse GAN model loaded successfully",
      "model_failed": "Could not load model: {error}. Using synthetic generation.",
      "batch_processing": "Processing {total} text samples",
      "sample_saved": "Saved sample {index} to: {path}",
      "validation": "Generation quality: {score:.3f}",
      "exporting": "Exporting to format: {format}"
    },
    "info": {
      "title": "BCI-GPT System Information",
      "pytorch": "PyTorch",
      "cuda": "CUDA",
      "mne": "MNE (Neuroimaging)",
      "transformers": "Transformers",
      "lsl": "Lab Streaming Layer",
      "brainflow": "BrainFlow",
      "available": "Available",
      "not_available": "Not Available",
      "devices": "{count} devices",
      "cpu_only": "CPU only",
      "install_hint": "pip install {package}"
    }
  },
  "models": {
    "bci_gpt": {
      "name": "BCI-GPT Model",
      "description": "Brain-Computer Interface GPT for thought-to-text conversion",
      "loading": "Loading BCI-GPT model...",
      "loaded": "BCI-GPT model loaded successfully",
      "failed": "Failed to load BCI-GPT model: {error}",
      "inference": "Running inference...",
      "training": "Training model...",
      "validation": "Validating model performance..."
    },
    "inverse_gan": {
      "name": "Inverse GAN",
      "description": "Generative model for text-to-EEG conversion",
      "loading": "Loading Inverse GAN model...",
      "loaded": "Inverse GAN model loaded successfully",
      "failed": "Failed to load Inverse GAN model: {error}",
      "generating": "Generating synthetic EEG...",
      "training": "Training Inverse GAN..."
    }
  },
  "eeg": {
    "channels": "Channels",
    "samples": "Samples",
    "duration": "Duration",
    "sampling_rate": "Sampling Rate",
    "quality": "Signal Quality",
    "artifact": "Artifact",
    "preprocessing": "Preprocessing",
    "filtering": "Filtering",
    "epoch": "Epoch",
    "bandpass": "Bandpass Filter",
    "notch": "Notch Filter",
    "reference": "Reference",
    "impedance": "Impedance",
    "good_quality": "Good quality signal",
    "poor_quality": "Poor quality signal - check electrodes",
    "loading_data": "Loading EEG data...",
    "processing_data": "Processing EEG data...",
    "validation_passed": "EEG validation passed",
    "validation_failed": "EEG validation failed: {error}"
  },
  "streaming": {
    "connecting": "Connecting to data stream...",
    "connected": "Connected to {backend} stream",
    "disconnected": "Disconnected from stream",
    "connection_failed": "Stream connection failed: {error}",
    "data_received": "Received {samples} samples",
    "buffer_full": "Buffer is full - dropping samples",
    "quality_check": "Signal quality: {score}/100",
    "latency": "Stream latency: {latency}ms",
    "throughput": "Throughput: {rate} samples/sec"
  },
  "security": {
    "encryption_enabled": "Data encryption enabled",
    "encryption_disabled": "Warning: Data encryption disabled",
    "access_granted": "Access granted",
    "access_denied": "Access denied: {reason}",
    "session_started": "Secure session started",
    "session_ended": "Secure session ended",
    "privacy_level": "Privacy level: {level}",
    "anonymization": "Data anonymization applied",
    "attack_detected": "Security threat detected: {type}",
    "compliance_check": "Compliance check: {status}",
    "hipaa_compliant": "HIPAA compliant",
    "hipaa_violation": "HIPAA violation: {issue}"
  },
  "monitoring": {
    "system_health": "System Health",
    "performance": "Performance",
    "memory_usage": "Memory Usage",
    "cpu_usage": "CPU Usage",
    "gpu_usage": "GPU Usage",
    "disk_usage": "Disk Usage",
    "network": "Network",
    "uptime": "Uptime",
    "healthy": "Healthy",
    "warning": "Warning",
    "critical": "Critical",
    "error_count": "Error Count",
    "metrics_collected": "Metrics collected: {count}",
    "alert": "Alert: {message}",
    "session_started": "Monitoring session started",
    "session_ended": "Monitoring session ended"
  },
  "clinical": {
    "patient_id": "Patient ID",
    "session_id": "Session ID",
    "session_duration": "Session Duration",
    "safety_check": "Safety Check",
    "fatigue_detected": "Fatigue detected - recommend break",
    "break_recommended": "Break recommended ({duration} seconds)",
    "break_enforced": "Mandatory break enforced",
    "session_safe": "Session within safety parameters",
    "session_exceeded": "Session exceeded maximum duration",
    "emergency_stop": "Emergency stop activated",
    "calibration": "Calibration",
    "calibration_complete": "Calibration completed",
    "therapy_mode": "Therapy Mode",
    "research_mode": "Research Mode"
  },
  "validation": {
    "checking": "Validating data quality...",
    "passed": "Validation passed",
    "failed": "Validation failed",
    "realism_score": "Realism Score",
    "temporal_consistency": "Temporal Consistency",
    "spectral_similarity": "Spectral Similarity",
    "spatial_coherence": "Spatial Coherence",
    "artifact_score": "Artifact Score",
    "overall_quality": "Overall Quality",
    "excellent": "Excellent",
    "good": "Good",
    "fair": "Fair",
    "poor": "Poor",
    "recommendations": "Recommendations"
  },
  "optimization": {
    "optimizing": "Optimizing performance...",
    "quantization": "Applying quantization...",
    "pruning": "Applying pruning...",
    "jit_compilation": "JIT compilation...",
    "memory_optimization": "Memory optimization...",
    "batch_optimization": "Batch size optimization...",
    "optimization_complete": "Optimization complete",
    "speedup": "{ratio:.2f}x speedup achieved",
    "model_size_reduced": "Model size reduced by {percentage:.1%}",
    "optimal_batch_size": "Optimal batch size: {size}",
    "target_latency": "Target latency: {latency}ms",
    "achieved_latency": "Achieved latency: {latency}ms"
  },
  "cache": {
    "hit": "Cache hit",
    "miss": "Cache miss", 
    "eviction": "Cache eviction",
    "clear": "Cache cleared",
    "statistics": "Cache Statistics",
    "hit_rate": "Hit Rate",
    "memory_usage": "Memory Usage",
    "entries": "Entries",
    "size": "Size",
    "cleanup": "Cache cleanup performed",
    "warming": "Warming up cache..."
  },
  "export": {
    "exporting": "Exporting to {format}...",
    "export_complete": "Export completed: {path}",
    "export_failed": "Export failed: {error}",
    "format_not_supported": "Format not supported: {format}",
    "formats": {
      "onnx": "ONNX",
      "torchscript": "TorchScript", 
      "tensorrt": "TensorRT",
      "numpy": "NumPy",
      "mat": "MATLAB",
      "edf": "EDF",
      "json": "JSON",
      "csv": "CSV"
    }
  },
  "errors": {
    "file_not_found": "File not found: {path}",
    "invalid_format": "Invalid file format: {format}",
    "permission_denied": "Permission denied: {path}",
    "out_of_memory": "Out of memory",
    "gpu_error": "GPU error: {error}",
    "model_error": "Model error: {error}",
    "data_error": "Data error: {error}",
    "network_error": "Network error: {error}",
    "timeout": "Operation timed out",
    "interrupted": "Operation interrupted",
    "unknown_error": "Unknown error: {error}",
    "validation_error": "Validation error: {field}",
    "configuration_error": "Configuration error: {setting}",
    "compatibility_error": "Compatibility error: {details}"
  },
  "help": {
    "usage": "Usage",
    "options": "Options",
    "examples": "Examples",
    "description": "Description",
    "arguments": "Arguments",
    "commands": "Available Commands",
    "see_also": "See Also",
    "version": "Version",
    "documentation": "Documentation",
    "support": "Support",
    "report_issue": "Report Issue",
    "contact": "Contact"
  }
}